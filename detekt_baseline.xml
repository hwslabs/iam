<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ConstructorParameterNaming:PolicyPaginatedResponse.kt$PolicyPaginatedResponse$val `data`: kotlin.collections.List&lt;Policy&gt;? = null</ID>
    <ID>ConstructorParameterNaming:UserPaginatedResponse.kt$UserPaginatedResponse$val `data`: kotlin.collections.List&lt;User&gt;? = null</ID>
    <ID>EnumNaming:CreateUserRequest.kt$CreateUserRequest.Status.active$active</ID>
    <ID>EnumNaming:CreateUserRequest.kt$CreateUserRequest.Status.inactive$inactive</ID>
    <ID>EnumNaming:CreateUserRequest.kt$CreateUserRequest.UserType.admin$admin</ID>
    <ID>EnumNaming:CreateUserRequest.kt$CreateUserRequest.UserType.apiOnly$apiOnly</ID>
    <ID>EnumNaming:CreateUserRequest.kt$CreateUserRequest.UserType.normal$normal</ID>
    <ID>EnumNaming:CreateUserRequest.kt$CreateUserRequest.UserType.system$system</ID>
    <ID>EnumNaming:Credential.kt$Credential.Status.active$active</ID>
    <ID>EnumNaming:Credential.kt$Credential.Status.inactive$inactive</ID>
    <ID>EnumNaming:CredentialWithoutSecret.kt$CredentialWithoutSecret.Status.active$active</ID>
    <ID>EnumNaming:CredentialWithoutSecret.kt$CredentialWithoutSecret.Status.inactive$inactive</ID>
    <ID>EnumNaming:PaginationOptions.kt$PaginationOptions.SortOrder.asc$asc</ID>
    <ID>EnumNaming:PaginationOptions.kt$PaginationOptions.SortOrder.desc$desc</ID>
    <ID>EnumNaming:PolicyStatement.kt$PolicyStatement.Effect.allow$allow</ID>
    <ID>EnumNaming:PolicyStatement.kt$PolicyStatement.Effect.deny$deny</ID>
    <ID>EnumNaming:ResourceActionEffect.kt$ResourceActionEffect.Effect.allow$allow</ID>
    <ID>EnumNaming:ResourceActionEffect.kt$ResourceActionEffect.Effect.deny$deny</ID>
    <ID>EnumNaming:UpdateCredentialRequest.kt$UpdateCredentialRequest.Status.active$active</ID>
    <ID>EnumNaming:UpdateCredentialRequest.kt$UpdateCredentialRequest.Status.inactive$inactive</ID>
    <ID>EnumNaming:UpdateUserRequest.kt$UpdateUserRequest.Status.active$active</ID>
    <ID>EnumNaming:UpdateUserRequest.kt$UpdateUserRequest.Status.deleted$deleted</ID>
    <ID>EnumNaming:UpdateUserRequest.kt$UpdateUserRequest.Status.inactive$inactive</ID>
    <ID>EnumNaming:User.kt$User.Status.active$active</ID>
    <ID>EnumNaming:User.kt$User.Status.deleted$deleted</ID>
    <ID>EnumNaming:User.kt$User.Status.inactive$inactive</ID>
    <ID>EnumNaming:User.kt$User.UserType.admin$admin</ID>
    <ID>EnumNaming:User.kt$User.UserType.apiOnly$apiOnly</ID>
    <ID>EnumNaming:User.kt$User.UserType.normal$normal</ID>
    <ID>EnumNaming:User.kt$User.UserType.system$system</ID>
    <ID>MagicNumber:Application.kt$8081</ID>
    <ID>MagicNumber:Configuration.kt$10.0</ID>
    <ID>MagicNumber:Configuration.kt$1024</ID>
    <ID>MagicNumber:Configuration.kt$365</ID>
    <ID>MagicNumber:Configuration.kt$4</ID>
    <ID>MagicNumber:Configuration.kt$60</ID>
    <ID>MagicNumber:DatabaseFactory.kt$DatabaseFactory$3</ID>
    <ID>MagicNumber:Hrn.kt$ResourceHrn$5</ID>
    <ID>MaxLineLength:Authorization.kt$fun Route.withAnyPermission(vararg action: Action, build: Route.() -&gt; Unit)</ID>
    <ID>MaxLineLength:Configuration.kt$MicrometerConfigs$/* * TODO: Configure "LoggingMeterRegistry" with a logging sink to direct metrics logs to a separate "iam_metrics.log" logback appender * http://javadox.com/io.micrometer/micrometer-core/1.2.1/io/micrometer/core/instrument/logging/LoggingMeterRegistry.Builder.html#loggingSink(java.util.function.Consumer) */</ID>
    <ID>MaxLineLength:Hrn.kt$GlobalHrn.Companion$val GLOBAL_HRN_REGEX = """^hrn:(?&lt;organization&gt;[^:$\n]+)\$(?&lt;resourceType&gt;[^:\n]*):{0,1}(?&lt;operation&gt;[^/\n:]*)""".toRegex()</ID>
    <ID>MaxLineLength:Hrn.kt$Hrn$*</ID>
    <ID>MaxLineLength:Hrn.kt$ResourceHrn$// 5. /organization/&lt;organizationId&gt;/resource/&lt;resourceId&gt; - hrn:hypto:&lt;accountId&gt;:iam-resource/12345 - updateResource</ID>
    <ID>MaxLineLength:Hrn.kt$ResourceHrn$// 6. /organization/&lt;organizationId&gt;/user/&lt;userId&gt;/credentials/ - hrn:hypto:&lt;accountId&gt;:iam-user/12345 - addCredentials</ID>
    <ID>MaxLineLength:Hrn.kt$ResourceHrn$// 7. /organization/&lt;organizationId&gt;/resource/&lt;resourceId&gt;/action/ - hrn:hypto:&lt;accountId&gt;:iam-resource/12345 - addAction</ID>
    <ID>MaxLineLength:Hrn.kt$ResourceHrn$// 8. /organization/&lt;organizationId&gt;/user/&lt;userId&gt;/credentials/&lt;credentialsId&gt; - hrn:hypto:&lt;accountId&gt;:iam-credential/12345 - getCredentials</ID>
    <ID>MaxLineLength:Hrn.kt$ResourceHrn$// 9. /organization/&lt;organizationId&gt;/resource/&lt;resourceId&gt;/action/&lt;actionId&gt; - hrn:hypto:&lt;accountId&gt;:iam-action/12345 - updateAction</ID>
    <ID>MaxLineLength:Hrn.kt$ResourceHrn.Companion$val RESOURCE_HRN_REGEX = """^hrn:(?&lt;organization&gt;[^:\n]+):(?&lt;accountId&gt;[^:\n]*):(?&lt;resourceType&gt;[^:/\n]*)/{0,1}(?&lt;resourceInstance&gt;[^/\n:]*)""".toRegex()</ID>
    <ID>MaxLineLength:PolicyService.kt$PolicyServiceImpl$.</ID>
    <ID>MaxLineLength:PolicyService.kt$PolicyServiceImpl$val</ID>
    <ID>UnusedPrivateMember:Configuration.kt$MicrometerConfigs$private fun getNewRelicMeterRegistry(): NewRelicRegistry</ID>
    <ID>UnusedPrivateMember:Hrn.kt$ResourceHrn$private fun getResourceInstance(splits: List&lt;String&gt;): String?</ID>
    <ID>UnusedPrivateMember:Hrn.kt$ResourceHrn$private fun getResourceType(splits: List&lt;String&gt;): String?</ID>
    <ID>WildcardImport:Authorization.kt$import io.ktor.application.*</ID>
    <ID>WildcardImport:Authorization.kt$import io.ktor.auth.*</ID>
    <ID>WildcardImport:Authorization.kt$import io.ktor.request.*</ID>
    <ID>WildcardImport:Authorization.kt$import io.ktor.routing.*</ID>
    <ID>WildcardImport:Authorization.kt$import io.ktor.util.*</ID>
    <ID>WildcardImport:Authorization.kt$import io.ktor.util.pipeline.*</ID>
  </CurrentIssues>
</SmellBaseline>
