=begin
#Hypto IAM

#APIs for Hypto IAM Service.

The version of the OpenAPI document: 1.0.0
Contact: engineering@hypto.in
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module IamRuby
  class UserCredentialManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new credential for a user
    # Create a new credential for a user. This API returns the credential's secret key, which will be available only in the response of this API.
    # @param user_name [String] 
    # @param organization_id [String] 
    # @param create_credential_request [CreateCredentialRequest] Payload to create credential
    # @param [Hash] opts the optional parameters
    # @return [Credential]
    def create_credential(user_name, organization_id, create_credential_request, opts = {})
      data, _status_code, _headers = create_credential_with_http_info(user_name, organization_id, create_credential_request, opts)
      data
    end

    # Create a new credential for a user
    # Create a new credential for a user. This API returns the credential&#39;s secret key, which will be available only in the response of this API.
    # @param user_name [String] 
    # @param organization_id [String] 
    # @param create_credential_request [CreateCredentialRequest] Payload to create credential
    # @param [Hash] opts the optional parameters
    # @return [Array<(Credential, Integer, Hash)>] Credential data, response status code and response headers
    def create_credential_with_http_info(user_name, organization_id, create_credential_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserCredentialManagementApi.create_credential ...'
      end
      # verify the required parameter 'user_name' is set
      if @api_client.config.client_side_validation && user_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_name' when calling UserCredentialManagementApi.create_credential"
      end
      if @api_client.config.client_side_validation && user_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "user_name" when calling UserCredentialManagementApi.create_credential, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && user_name !~ pattern
        fail ArgumentError, "invalid value for 'user_name' when calling UserCredentialManagementApi.create_credential, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserCredentialManagementApi.create_credential"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserCredentialManagementApi.create_credential, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserCredentialManagementApi.create_credential, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'create_credential_request' is set
      if @api_client.config.client_side_validation && create_credential_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_credential_request' when calling UserCredentialManagementApi.create_credential"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/users/{user_name}/credentials'.sub('{' + 'user_name' + '}', CGI.escape(user_name.to_s)).sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_credential_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Credential'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserCredentialManagementApi.create_credential",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserCredentialManagementApi#create_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a credential
    # Delete a credential associated with the user
    # @param organization_id [String] 
    # @param user_name [String] 
    # @param credential_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def delete_credential(organization_id, user_name, credential_id, opts = {})
      data, _status_code, _headers = delete_credential_with_http_info(organization_id, user_name, credential_id, opts)
      data
    end

    # Delete a credential
    # Delete a credential associated with the user
    # @param organization_id [String] 
    # @param user_name [String] 
    # @param credential_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def delete_credential_with_http_info(organization_id, user_name, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserCredentialManagementApi.delete_credential ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserCredentialManagementApi.delete_credential"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserCredentialManagementApi.delete_credential, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserCredentialManagementApi.delete_credential, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_name' is set
      if @api_client.config.client_side_validation && user_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_name' when calling UserCredentialManagementApi.delete_credential"
      end
      if @api_client.config.client_side_validation && user_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "user_name" when calling UserCredentialManagementApi.delete_credential, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && user_name !~ pattern
        fail ArgumentError, "invalid value for 'user_name' when calling UserCredentialManagementApi.delete_credential, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling UserCredentialManagementApi.delete_credential"
      end
      if @api_client.config.client_side_validation && credential_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "credential_id" when calling UserCredentialManagementApi.delete_credential, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/users/{user_name}/credentials/{credential_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'user_name' + '}', CGI.escape(user_name.to_s)).sub('{' + 'credential_id' + '}', CGI.escape(credential_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserCredentialManagementApi.delete_credential",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserCredentialManagementApi#delete_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets credential for the user
    # Gets credential for the user, given the credential id
    # @param organization_id [String] 
    # @param user_name [String] 
    # @param credential_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CredentialWithoutSecret]
    def get_credential(organization_id, user_name, credential_id, opts = {})
      data, _status_code, _headers = get_credential_with_http_info(organization_id, user_name, credential_id, opts)
      data
    end

    # Gets credential for the user
    # Gets credential for the user, given the credential id
    # @param organization_id [String] 
    # @param user_name [String] 
    # @param credential_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialWithoutSecret, Integer, Hash)>] CredentialWithoutSecret data, response status code and response headers
    def get_credential_with_http_info(organization_id, user_name, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserCredentialManagementApi.get_credential ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserCredentialManagementApi.get_credential"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserCredentialManagementApi.get_credential, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserCredentialManagementApi.get_credential, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_name' is set
      if @api_client.config.client_side_validation && user_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_name' when calling UserCredentialManagementApi.get_credential"
      end
      if @api_client.config.client_side_validation && user_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "user_name" when calling UserCredentialManagementApi.get_credential, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && user_name !~ pattern
        fail ArgumentError, "invalid value for 'user_name' when calling UserCredentialManagementApi.get_credential, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling UserCredentialManagementApi.get_credential"
      end
      if @api_client.config.client_side_validation && credential_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "credential_id" when calling UserCredentialManagementApi.get_credential, the character length must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/users/{user_name}/credentials/{credential_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'user_name' + '}', CGI.escape(user_name.to_s)).sub('{' + 'credential_id' + '}', CGI.escape(credential_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CredentialWithoutSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserCredentialManagementApi.get_credential",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserCredentialManagementApi#get_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the status of credential
    # Update the status of credential to ACTIVE/INACTIVE. Credentials which are marked INACTIVE cannot be used to fetch short-term tokens.
    # @param organization_id [String] 
    # @param user_name [String] 
    # @param credential_id [String] 
    # @param update_credential_request [UpdateCredentialRequest] Payload to update credential
    # @param [Hash] opts the optional parameters
    # @return [CredentialWithoutSecret]
    def update_credential(organization_id, user_name, credential_id, update_credential_request, opts = {})
      data, _status_code, _headers = update_credential_with_http_info(organization_id, user_name, credential_id, update_credential_request, opts)
      data
    end

    # Update the status of credential
    # Update the status of credential to ACTIVE/INACTIVE. Credentials which are marked INACTIVE cannot be used to fetch short-term tokens.
    # @param organization_id [String] 
    # @param user_name [String] 
    # @param credential_id [String] 
    # @param update_credential_request [UpdateCredentialRequest] Payload to update credential
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialWithoutSecret, Integer, Hash)>] CredentialWithoutSecret data, response status code and response headers
    def update_credential_with_http_info(organization_id, user_name, credential_id, update_credential_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserCredentialManagementApi.update_credential ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserCredentialManagementApi.update_credential"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserCredentialManagementApi.update_credential, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserCredentialManagementApi.update_credential, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_name' is set
      if @api_client.config.client_side_validation && user_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_name' when calling UserCredentialManagementApi.update_credential"
      end
      if @api_client.config.client_side_validation && user_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "user_name" when calling UserCredentialManagementApi.update_credential, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && user_name !~ pattern
        fail ArgumentError, "invalid value for 'user_name' when calling UserCredentialManagementApi.update_credential, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling UserCredentialManagementApi.update_credential"
      end
      if @api_client.config.client_side_validation && credential_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "credential_id" when calling UserCredentialManagementApi.update_credential, the character length must be smaller than or equal to 50.'
      end

      # verify the required parameter 'update_credential_request' is set
      if @api_client.config.client_side_validation && update_credential_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_credential_request' when calling UserCredentialManagementApi.update_credential"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/users/{user_name}/credentials/{credential_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'user_name' + '}', CGI.escape(user_name.to_s)).sub('{' + 'credential_id' + '}', CGI.escape(credential_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_credential_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CredentialWithoutSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserCredentialManagementApi.update_credential",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserCredentialManagementApi#update_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
