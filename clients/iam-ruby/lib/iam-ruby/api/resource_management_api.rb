=begin
#Hypto IAM

#APIs for Hypto IAM Service.

The version of the OpenAPI document: 1.0.0
Contact: engineering@hypto.in
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module IamRuby
  class ResourceManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a resource name in an organization.
    # Creates a resource name. Access policies can be associated with the instances of these resources. ex - \\\"Wallet\\\" is a resource name in the organization org - \\\"Org#1\\\" and \\\"wallet#1\\\" is the instance of the resource \\\"Wallet\\\". Policies on which user to access the wallet#1 can be created by the user having privilege to access the resource.
    # @param organization_id [String] 
    # @param create_resource_request [CreateResourceRequest] Payload to create resource
    # @param [Hash] opts the optional parameters
    # @return [Resource]
    def create_resource(organization_id, create_resource_request, opts = {})
      data, _status_code, _headers = create_resource_with_http_info(organization_id, create_resource_request, opts)
      data
    end

    # Create a resource name in an organization.
    # Creates a resource name. Access policies can be associated with the instances of these resources. ex - \\\&quot;Wallet\\\&quot; is a resource name in the organization org - \\\&quot;Org#1\\\&quot; and \\\&quot;wallet#1\\\&quot; is the instance of the resource \\\&quot;Wallet\\\&quot;. Policies on which user to access the wallet#1 can be created by the user having privilege to access the resource.
    # @param organization_id [String] 
    # @param create_resource_request [CreateResourceRequest] Payload to create resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def create_resource_with_http_info(organization_id, create_resource_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceManagementApi.create_resource ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling ResourceManagementApi.create_resource"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling ResourceManagementApi.create_resource, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling ResourceManagementApi.create_resource, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'create_resource_request' is set
      if @api_client.config.client_side_validation && create_resource_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_resource_request' when calling ResourceManagementApi.create_resource"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/resources'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_resource_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ResourceManagementApi.create_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceManagementApi#create_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a resource
    # Delete a resource
    # @param organization_id [String] 
    # @param resource_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def delete_resource(organization_id, resource_name, opts = {})
      data, _status_code, _headers = delete_resource_with_http_info(organization_id, resource_name, opts)
      data
    end

    # Delete a resource
    # Delete a resource
    # @param organization_id [String] 
    # @param resource_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def delete_resource_with_http_info(organization_id, resource_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceManagementApi.delete_resource ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling ResourceManagementApi.delete_resource"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling ResourceManagementApi.delete_resource, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling ResourceManagementApi.delete_resource, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'resource_name' is set
      if @api_client.config.client_side_validation && resource_name.nil?
        fail ArgumentError, "Missing the required parameter 'resource_name' when calling ResourceManagementApi.delete_resource"
      end
      if @api_client.config.client_side_validation && resource_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "resource_name" when calling ResourceManagementApi.delete_resource, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && resource_name !~ pattern
        fail ArgumentError, "invalid value for 'resource_name' when calling ResourceManagementApi.delete_resource, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/resources/{resource_name}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'resource_name' + '}', CGI.escape(resource_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ResourceManagementApi.delete_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceManagementApi#delete_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the resource details
    # Gets the resource details associated with the organization
    # @param organization_id [String] 
    # @param resource_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Resource]
    def get_resource(organization_id, resource_name, opts = {})
      data, _status_code, _headers = get_resource_with_http_info(organization_id, resource_name, opts)
      data
    end

    # Get the resource details
    # Gets the resource details associated with the organization
    # @param organization_id [String] 
    # @param resource_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def get_resource_with_http_info(organization_id, resource_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceManagementApi.get_resource ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling ResourceManagementApi.get_resource"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling ResourceManagementApi.get_resource, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling ResourceManagementApi.get_resource, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'resource_name' is set
      if @api_client.config.client_side_validation && resource_name.nil?
        fail ArgumentError, "Missing the required parameter 'resource_name' when calling ResourceManagementApi.get_resource"
      end
      if @api_client.config.client_side_validation && resource_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "resource_name" when calling ResourceManagementApi.get_resource, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && resource_name !~ pattern
        fail ArgumentError, "invalid value for 'resource_name' when calling ResourceManagementApi.get_resource, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/resources/{resource_name}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'resource_name' + '}', CGI.escape(resource_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ResourceManagementApi.get_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceManagementApi#get_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Resources
    # List all the resource names in an organization.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @option opts [String] :sort_order 
    # @return [ResourcePaginatedResponse]
    def list_resources(organization_id, opts = {})
      data, _status_code, _headers = list_resources_with_http_info(organization_id, opts)
      data
    end

    # List Resources
    # List all the resource names in an organization.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @option opts [String] :sort_order 
    # @return [Array<(ResourcePaginatedResponse, Integer, Hash)>] ResourcePaginatedResponse data, response status code and response headers
    def list_resources_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceManagementApi.list_resources ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling ResourceManagementApi.list_resources"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling ResourceManagementApi.list_resources, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling ResourceManagementApi.list_resources, must conform to the pattern #{pattern}."
      end

      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/resources'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourcePaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ResourceManagementApi.list_resources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceManagementApi#list_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a resource
    # Update resource name of the organization
    # @param organization_id [String] 
    # @param resource_name [String] 
    # @param update_resource_request [UpdateResourceRequest] Payload to update resource
    # @param [Hash] opts the optional parameters
    # @return [Resource]
    def update_resource(organization_id, resource_name, update_resource_request, opts = {})
      data, _status_code, _headers = update_resource_with_http_info(organization_id, resource_name, update_resource_request, opts)
      data
    end

    # Update a resource
    # Update resource name of the organization
    # @param organization_id [String] 
    # @param resource_name [String] 
    # @param update_resource_request [UpdateResourceRequest] Payload to update resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def update_resource_with_http_info(organization_id, resource_name, update_resource_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceManagementApi.update_resource ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling ResourceManagementApi.update_resource"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling ResourceManagementApi.update_resource, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling ResourceManagementApi.update_resource, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'resource_name' is set
      if @api_client.config.client_side_validation && resource_name.nil?
        fail ArgumentError, "Missing the required parameter 'resource_name' when calling ResourceManagementApi.update_resource"
      end
      if @api_client.config.client_side_validation && resource_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "resource_name" when calling ResourceManagementApi.update_resource, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && resource_name !~ pattern
        fail ArgumentError, "invalid value for 'resource_name' when calling ResourceManagementApi.update_resource, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'update_resource_request' is set
      if @api_client.config.client_side_validation && update_resource_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_resource_request' when calling ResourceManagementApi.update_resource"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/resources/{resource_name}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'resource_name' + '}', CGI.escape(resource_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_resource_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ResourceManagementApi.update_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceManagementApi#update_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
