=begin
#Hypto IAM

#APIs for Hypto IAM Service.

The version of the OpenAPI document: 1.0.0
Contact: engineering@hypto.in
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module IamRuby
  class UserAuthorizationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate a token
    # Generate a token for the given user credential
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [TokenResponse]
    def get_token(organization_id, opts = {})
      data, _status_code, _headers = get_token_with_http_info(organization_id, opts)
      data
    end

    # Generate a token
    # Generate a token for the given user credential
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenResponse, Integer, Hash)>] TokenResponse data, response status code and response headers
    def get_token_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAuthorizationApi.get_token ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserAuthorizationApi.get_token"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserAuthorizationApi.get_token, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserAuthorizationApi.get_token, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/token'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAuthorizationApi.get_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAuthorizationApi#get_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate an auth request
    # Validate if the caller has access to resource-action in the request
    # @param validation_request [ValidationRequest] Payload to validate if a user has access to a resource-action
    # @param [Hash] opts the optional parameters
    # @return [ValidationResponse]
    def validate(validation_request, opts = {})
      data, _status_code, _headers = validate_with_http_info(validation_request, opts)
      data
    end

    # Validate an auth request
    # Validate if the caller has access to resource-action in the request
    # @param validation_request [ValidationRequest] Payload to validate if a user has access to a resource-action
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidationResponse, Integer, Hash)>] ValidationResponse data, response status code and response headers
    def validate_with_http_info(validation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAuthorizationApi.validate ...'
      end
      # verify the required parameter 'validation_request' is set
      if @api_client.config.client_side_validation && validation_request.nil?
        fail ArgumentError, "Missing the required parameter 'validation_request' when calling UserAuthorizationApi.validate"
      end
      # resource path
      local_var_path = '/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(validation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ValidationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAuthorizationApi.validate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAuthorizationApi#validate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
