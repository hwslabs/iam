=begin
#Hypto IAM

#APIs for Hypto IAM Service.

The version of the OpenAPI document: 1.0.0
Contact: engineering@hypto.in
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module IamRuby
  class UserManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a user
    # User is an entity which represent a person who is part of the organization or account. This user entity can be created either through user name, password or the user can be federated through an identity provider like Google, Facebook or any SAML 2.0, OIDC identity provider. This is a sign-up api to create a new user in an organization.
    # @param organization_id [String] 
    # @param create_user_request [CreateUserRequest] Payload to create user
    # @param [Hash] opts the optional parameters
    # @return [User]
    def create_user(organization_id, create_user_request, opts = {})
      data, _status_code, _headers = create_user_with_http_info(organization_id, create_user_request, opts)
      data
    end

    # Create a user
    # User is an entity which represent a person who is part of the organization or account. This user entity can be created either through user name, password or the user can be federated through an identity provider like Google, Facebook or any SAML 2.0, OIDC identity provider. This is a sign-up api to create a new user in an organization.
    # @param organization_id [String] 
    # @param create_user_request [CreateUserRequest] Payload to create user
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def create_user_with_http_info(organization_id, create_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagementApi.create_user ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserManagementApi.create_user"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserManagementApi.create_user, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserManagementApi.create_user, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'create_user_request' is set
      if @api_client.config.client_side_validation && create_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_user_request' when calling UserManagementApi.create_user"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/users'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserManagementApi.create_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagementApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a User
    # Delete a User
    # @param user_name [String] 
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def delete_user(user_name, organization_id, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(user_name, organization_id, opts)
      data
    end

    # Delete a User
    # Delete a User
    # @param user_name [String] 
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def delete_user_with_http_info(user_name, organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagementApi.delete_user ...'
      end
      # verify the required parameter 'user_name' is set
      if @api_client.config.client_side_validation && user_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_name' when calling UserManagementApi.delete_user"
      end
      if @api_client.config.client_side_validation && user_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "user_name" when calling UserManagementApi.delete_user, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && user_name !~ pattern
        fail ArgumentError, "invalid value for 'user_name' when calling UserManagementApi.delete_user, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserManagementApi.delete_user"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserManagementApi.delete_user, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserManagementApi.delete_user, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/users/{user_name}'.sub('{' + 'user_name' + '}', CGI.escape(user_name.to_s)).sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserManagementApi.delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagementApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a user entity associated with the organization
    # Get a User
    # @param user_name [String] 
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_user(user_name, organization_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(user_name, organization_id, opts)
      data
    end

    # Gets a user entity associated with the organization
    # Get a User
    # @param user_name [String] 
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(user_name, organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagementApi.get_user ...'
      end
      # verify the required parameter 'user_name' is set
      if @api_client.config.client_side_validation && user_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_name' when calling UserManagementApi.get_user"
      end
      if @api_client.config.client_side_validation && user_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "user_name" when calling UserManagementApi.get_user, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && user_name !~ pattern
        fail ArgumentError, "invalid value for 'user_name' when calling UserManagementApi.get_user, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserManagementApi.get_user"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserManagementApi.get_user, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserManagementApi.get_user, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/users/{user_name}'.sub('{' + 'user_name' + '}', CGI.escape(user_name.to_s)).sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserManagementApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagementApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users
    # List users associated with the organization. This is a pagniated api which returns the list of users with a next page token.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @return [UserPaginatedResponse]
    def list_users(organization_id, opts = {})
      data, _status_code, _headers = list_users_with_http_info(organization_id, opts)
      data
    end

    # List users
    # List users associated with the organization. This is a pagniated api which returns the list of users with a next page token.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token 
    # @option opts [String] :page_size 
    # @return [Array<(UserPaginatedResponse, Integer, Hash)>] UserPaginatedResponse data, response status code and response headers
    def list_users_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagementApi.list_users ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserManagementApi.list_users"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserManagementApi.list_users, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserManagementApi.list_users, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/users'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserPaginatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserManagementApi.list_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagementApi#list_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a User
    # Update a User
    # @param user_name [String] 
    # @param organization_id [String] 
    # @param update_user_request [UpdateUserRequest] Payload to update user
    # @param [Hash] opts the optional parameters
    # @return [User]
    def update_user(user_name, organization_id, update_user_request, opts = {})
      data, _status_code, _headers = update_user_with_http_info(user_name, organization_id, update_user_request, opts)
      data
    end

    # Update a User
    # Update a User
    # @param user_name [String] 
    # @param organization_id [String] 
    # @param update_user_request [UpdateUserRequest] Payload to update user
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def update_user_with_http_info(user_name, organization_id, update_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagementApi.update_user ...'
      end
      # verify the required parameter 'user_name' is set
      if @api_client.config.client_side_validation && user_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_name' when calling UserManagementApi.update_user"
      end
      if @api_client.config.client_side_validation && user_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "user_name" when calling UserManagementApi.update_user, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9_]{3,50}$/)
      if @api_client.config.client_side_validation && user_name !~ pattern
        fail ArgumentError, "invalid value for 'user_name' when calling UserManagementApi.update_user, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling UserManagementApi.update_user"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling UserManagementApi.update_user, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling UserManagementApi.update_user, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'update_user_request' is set
      if @api_client.config.client_side_validation && update_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_user_request' when calling UserManagementApi.update_user"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/users/{user_name}'.sub('{' + 'user_name' + '}', CGI.escape(user_name.to_s)).sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserManagementApi.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagementApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
