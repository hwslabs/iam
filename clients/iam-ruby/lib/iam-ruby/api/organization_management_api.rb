=begin
#Hypto IAM

#APIs for Hypto IAM Service.

The version of the OpenAPI document: 1.0.0
Contact: engineering@hypto.in
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module IamRuby
  class OrganizationManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates an organization.
    # Organization is the top level entity. All resources (like user, actions, policies) are created and managed under an organization. This is a privileged api and only internal applications has access to create an Organization.
    # @param create_organization_request [CreateOrganizationRequest] Payload to create organization
    # @param [Hash] opts the optional parameters
    # @return [CreateOrganizationResponse]
    def create_organization(create_organization_request, opts = {})
      data, _status_code, _headers = create_organization_with_http_info(create_organization_request, opts)
      data
    end

    # Creates an organization.
    # Organization is the top level entity. All resources (like user, actions, policies) are created and managed under an organization. This is a privileged api and only internal applications has access to create an Organization.
    # @param create_organization_request [CreateOrganizationRequest] Payload to create organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateOrganizationResponse, Integer, Hash)>] CreateOrganizationResponse data, response status code and response headers
    def create_organization_with_http_info(create_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationManagementApi.create_organization ...'
      end
      # verify the required parameter 'create_organization_request' is set
      if @api_client.config.client_side_validation && create_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_organization_request' when calling OrganizationManagementApi.create_organization"
      end
      # resource path
      local_var_path = '/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_organization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateOrganizationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrganizationManagementApi.create_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationManagementApi#create_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization
    # Delete an organization. This is a privileged api and only internal application will have access to delete organization.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccessResponse]
    def delete_organization(organization_id, opts = {})
      data, _status_code, _headers = delete_organization_with_http_info(organization_id, opts)
      data
    end

    # Delete an organization
    # Delete an organization. This is a privileged api and only internal application will have access to delete organization.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccessResponse, Integer, Hash)>] BaseSuccessResponse data, response status code and response headers
    def delete_organization_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationManagementApi.delete_organization ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationManagementApi.delete_organization"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling OrganizationManagementApi.delete_organization, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling OrganizationManagementApi.delete_organization, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/organizations/{organization_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrganizationManagementApi.delete_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationManagementApi#delete_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization
    # Get an organization and the metadata for the given organization.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Organization]
    def get_organization(organization_id, opts = {})
      data, _status_code, _headers = get_organization_with_http_info(organization_id, opts)
      data
    end

    # Get an organization
    # Get an organization and the metadata for the given organization.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def get_organization_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationManagementApi.get_organization ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationManagementApi.get_organization"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling OrganizationManagementApi.get_organization, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling OrganizationManagementApi.get_organization, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/organizations/{organization_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Organization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationManagementApi.get_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationManagementApi#get_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization
    # Update an organization
    # @param organization_id [String] 
    # @param update_organization_request [UpdateOrganizationRequest] Payload to update organization
    # @param [Hash] opts the optional parameters
    # @return [Organization]
    def update_organization(organization_id, update_organization_request, opts = {})
      data, _status_code, _headers = update_organization_with_http_info(organization_id, update_organization_request, opts)
      data
    end

    # Update an organization
    # Update an organization
    # @param organization_id [String] 
    # @param update_organization_request [UpdateOrganizationRequest] Payload to update organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def update_organization_with_http_info(organization_id, update_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationManagementApi.update_organization ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationManagementApi.update_organization"
      end
      if @api_client.config.client_side_validation && organization_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "organization_id" when calling OrganizationManagementApi.update_organization, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/^[A-Z]{10}$/)
      if @api_client.config.client_side_validation && organization_id !~ pattern
        fail ArgumentError, "invalid value for 'organization_id' when calling OrganizationManagementApi.update_organization, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'update_organization_request' is set
      if @api_client.config.client_side_validation && update_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_organization_request' when calling OrganizationManagementApi.update_organization"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_organization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Organization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationManagementApi.update_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationManagementApi#update_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
