=begin
#Hypto IAM

#APIs for Hypto IAM Service.

The version of the OpenAPI document: 1.0.0
Contact: engineering@hypto.in
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for IamRuby::ResourceManagementApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ResourceManagementApi' do
  before do
    # run before each test
    @api_instance = IamRuby::ResourceManagementApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ResourceManagementApi' do
    it 'should create an instance of ResourceManagementApi' do
      expect(@api_instance).to be_instance_of(IamRuby::ResourceManagementApi)
    end
  end

  # unit tests for create_resource
  # Create a resource name in an organization.
  # Creates a resource name. Access policies can be associated with the instances of these resources. ex - \\\&quot;Wallet\\\&quot; is a resource name in the organization org - \\\&quot;Org#1\\\&quot; and \\\&quot;wallet#1\\\&quot; is the instance of the resource \\\&quot;Wallet\\\&quot;. Policies on which user to access the wallet#1 can be created by the user having privilege to access the resource.
  # @param organization_id 
  # @param create_resource_request Payload to create resource
  # @param [Hash] opts the optional parameters
  # @return [Resource]
  describe 'create_resource test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_resource
  # Delete a resource
  # Delete a resource
  # @param organization_id 
  # @param resource_name 
  # @param [Hash] opts the optional parameters
  # @return [BaseSuccessResponse]
  describe 'delete_resource test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resource
  # Get the resource details
  # Gets the resource details associated with the organization
  # @param organization_id 
  # @param resource_name 
  # @param [Hash] opts the optional parameters
  # @return [Resource]
  describe 'get_resource test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_resources
  # List Resources
  # List all the resource names in an organization.
  # @param organization_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :next_token 
  # @option opts [String] :page_size 
  # @option opts [String] :sort_order 
  # @return [ResourcePaginatedResponse]
  describe 'list_resources test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_resource
  # Update a resource
  # Update resource name of the organization
  # @param organization_id 
  # @param resource_name 
  # @param update_resource_request Payload to update resource
  # @param [Hash] opts the optional parameters
  # @return [Resource]
  describe 'update_resource test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
