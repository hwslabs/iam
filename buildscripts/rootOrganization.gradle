buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "org.postgresql:postgresql:42.5.0"
    }
}

import groovy.sql.Sql
import java.sql.Driver

if (project.hasProperty("args")) {
    ext.cmdargs = project.getProperty("args")
} else {
    ext.cmdargs = ""
}

task createRootOrganization {
    description "Create a root organization. CAUTION: PRONE TO SQL INJECTION."
    doLast {
        if(cmdargs == "") {
            println "Required args missing. expected format: <organization_id> <user_id>"
            return
        }

        def driver = Class.forName("org.postgresql.Driver").getDeclaredConstructor().newInstance() as Driver
        def props = new Properties()

        props.setProperty("user", flyway.user)
        props.setProperty("password", flyway.password)
        def conn = driver.connect(flyway.url, props)
        def sql = new Sql(conn)

        def args =  cmdargs.split(" ")

        if(args.length != 2) {
            println "Required args missing. expected format: <organization_id> <user_id>"
            return
        }

        def orgId = args[0]
        def addRootPrivilegeStatementQuery = "UPDATE policies SET statements = " +
                "concat(statements, E'\\n', 'p, hrn:$orgId::iam-policy/admin, hrn:*, hrn:*, allow') " +
                "WHERE hrn='hrn:$orgId::iam-policy/admin' AND " +
                "organization_id='$orgId' AND " +
                "statements not like '%hrn:\\*, hrn:\\*, allow%';"
        println("executing query = $addRootPrivilegeStatementQuery")

        sql.execute(addRootPrivilegeStatementQuery)
    }
}