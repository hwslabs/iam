/**
* Hypto IAM
* APIs for Hypto IAM Service.
*
* OpenAPI spec version: 1.0.0
* Contact: engineering@hypto.in
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package com.hypto.iam.server

import com.hypto.iam.server.models.CreateActionRequest
import com.hypto.iam.server.models.CreateCredentialRequest
import com.hypto.iam.server.models.CreateOrganizationRequest
import com.hypto.iam.server.models.CreatePolicyRequest
import com.hypto.iam.server.models.CreateResourceRequest
import com.hypto.iam.server.models.CreateUserRequest
import com.hypto.iam.server.models.PolicyAssociationRequest
import com.hypto.iam.server.models.UpdateActionRequest
import com.hypto.iam.server.models.UpdateCredentialRequest
import com.hypto.iam.server.models.UpdateOrganizationRequest
import com.hypto.iam.server.models.UpdatePolicyRequest
import com.hypto.iam.server.models.UpdateResourceRequest
import com.hypto.iam.server.models.UpdateUserRequest
import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.Location
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.routing.Route
import io.ktor.routing.method
import io.ktor.util.pipeline.PipelineContext

// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}
@KtorExperimentalLocationsAPI
object Paths {
    /**
     * Create an action
     * Create an action
     * @param body Payload to create action
     * @param resourceId
     */
    @Location("/resources/{resourceId}/action")
    class CreateAction(val body: CreateActionRequest, val resourceId: String)

    /**
     * Delete an action
     * Delete an action
     * @param resourceId
     * @param id
     */
    @Location("/resources/{resourceId}/action/{id}")
    class DeleteAction(val resourceId: String, val id: String)

    /**
     * Get an action
     * Get an action
     * @param resourceId
     * @param id
     */
    @Location("/resources/{resourceId}/action/{id}")
    class GetAction(val resourceId: String, val id: String)

    /**
     * Update an action
     * Update an action
     * @param body Payload to update action
     * @param resourceId
     * @param id
     */
    @Location("/resources/{resourceId}/action/{id}")
    class UpdateAction(val body: UpdateActionRequest, val resourceId: String, val id: String)

    /**
     * Create a Credential
     * Create a Credential
     * @param body Payload to create credential
     * @param userId
     */
    @Location("/users/{userId}/credential")
    class CreateCredential(val body: CreateCredentialRequest, val userId: String)

    /**
     * Delete a credential
     * Delete a credential
     * @param userId
     * @param id
     */
    @Location("/users/{userId}/credential/{id}")
    class DeleteCredential(val userId: String, val id: String)

    /**
     * Get a credential
     * Get a credential
     * @param userId
     * @param id
     */
    @Location("/users/{userId}/credential/{id}")
    class GetCredential(val userId: String, val id: String)

    /**
     * Update a credential
     * Update a credential
     * @param body Payload to update credential
     * @param userId
     * @param id
     */
    @Location("/users/{userId}/credential/{id}")
    class UpdateCredential(val body: UpdateCredentialRequest, val userId: String, val id: String)

    /**
     * Create an organization
     * Create an organization
     * @param body Payload to create organization
     */
    @Location("/organizations")
    class CreateOrganization(val body: CreateOrganizationRequest)

    /**
     * Delete an organization
     * Delete an organization
     * @param id
     */
    @Location("/organization/{id}")
    class DeleteOrganization(val id: String)

    /**
     * Get an organization
     * Get an organization
     * @param id
     */
    @Location("/organization/{id}")
    class GetOrganization(val id: String)

    /**
     * Update an organization
     * Update an organization
     * @param body Payload to update organization
     * @param id
     */
    @Location("/organization/{id}")
    class UpdateOrganization(val body: UpdateOrganizationRequest, val id: String)

    /**
     * Create a policy
     * Create a policy
     * @param body Payload to create policy
     */
    @Location("/policies")
    class CreatePolicy(val body: CreatePolicyRequest)

    /**
     * Delete a policy
     * Delete a policy
     * @param id
     */
    @Location("/policies/{id}")
    class DeletePolicy(val id: String)

    /**
     * Get a policy
     * Get a policy
     * @param id
     */
    @Location("/policies/{id}")
    class GetPolicy(val id: String)

    /**
     * Get policies of a user
     * Get policies of a user
     * @param id
     */
    @Location("/users/{id}/policies")
    class GetUserPolicies(val id: String)

    /**
     * Update a policy
     * Update a policy
     * @param body Payload to update policy
     * @param id
     */
    @Location("/policies/{id}")
    class UpdatePolicy(val body: UpdatePolicyRequest, val id: String)

    /**
     * Create a resource type
     * Create a resource type
     * @param body Payload to create resource
     */
    @Location("/resource_types")
    class CreateResourceType(val body: CreateResourceRequest)

    /**
     * Delete a resource type
     * Delete a resource type
     * @param id
     */
    @Location("/resource_types/{id}")
    class DeleteResourceType(val id: String)

    /**
     * Get a resource type
     * Get a resource type
     * @param id
     */
    @Location("/resource_types/{id}")
    class GetResourceType(val id: String)

    /**
     * Update a resource type
     * Update a resource type
     * @param body Payload to update resource
     * @param id
     */
    @Location("/resource_types/{id}")
    class UpdateResourceType(val body: UpdateResourceRequest, val id: String)

    /**
     * Generate a token
     * Generate a token
     */
    @Location("/token")
    class GetToken()

    /**
     * Attach policies to user
     * Attach policies to user
     * @param body Payload to attach / detach a policy to a user / resource
     * @param id
     */
    @Location("/users/{id}/attach_policies")
    class AttachPolicies(val body: PolicyAssociationRequest, val id: String)

    /**
     * Create a user
     * Create a user
     * @param body Payload to create user
     */
    @Location("/users")
    class CreateUser(val body: CreateUserRequest)

    /**
     * Delete a User
     * Delete a User
     * @param id
     */
    @Location("/users/{id}")
    class DeleteUser(val id: String)

    /**
     * Detach policies to user
     * Detach policies to user
     * @param body Payload to attach / detach a policy to a user / resource
     * @param id
     */
    @Location("/users/{id}/detach_policies")
    class DetachPolicies(val body: PolicyAssociationRequest, val id: String)

    /**
     * Get a User
     * Get a User
     * @param id
     */
    @Location("/users/{id}")
    class GetUser(val id: String)

    /**
     * Update a User
     * Update a User
     * @param body Payload to update user
     * @param id
     */
    @Location("/users/{id}")
    class UpdateUser(val body: UpdateUserRequest, val id: String)
}
