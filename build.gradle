buildscript {
    ext.kotlin_version = '1.6.0'
    ext.ktor_version = '1.6.7'
    ext.shadow_version = '5.2.0'
    ext.exposed_version = "0.37.3"
    ext.jooq_version = "3.16.3"
    ext.h2Version = "2.1.210"
    ext.hikari_cp_version = "4.0.3"
    ext.junit_version = "5.8.2"
    ext.flyway_version = "8.4.3"
    ext.casbin_version = "1.22.1"
    ext.postgres_jdbc_driver = "42.3.2"

    repositories {
        jcenter()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
    }

    configurations['classpath'].resolutionStrategy.eachDependency {
        if (requested.group == 'org.jooq') {
            useVersion "$jooq_version"
        }
    }
}

plugins {
    id('org.flywaydb.flyway') version "$flyway_version"
    id("nu.studer.jooq") version "7.1"
    id "io.gitlab.arturbosch.detekt" version "1.3.1"
    id "org.jlleitschuh.gradle.ktlint" version "9.1.1"
    id "jacoco"
}

group 'com.hypto'
version '1.0.0'

wrapper {
    gradleVersion = '6.1.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

mainClassName = "com.hypto.iam.server.Application"
sourceCompatibility = 11

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams(true)
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("$buildDir/jacoco")
}

shadowJar {
    baseName = 'hypto-iam-server'
    version = '1.0.0'
}

repositories {
    mavenCentral()
    google()
    jcenter()
    maven { url  "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
}

configurations {
    flywayMigration
}

flyway {
    configurations = ['flywayMigration']
    url = "jdbc:postgresql://localhost:5435/iam"
    user = 'root'
    password = 'password'
}

jooq {
    version = "$jooq_version"
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }

                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.hypto.iam.server.db.models'
                    }
                }
            }
        }
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    finalizedBy jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    "com.hypto.iam.server.db.models.*",
                    "com.hypto.iam.server.models.*",
            ]
            limit {
                counter = 'INSTRUCTION'
                value = 'MISSEDRATIO'
                maximum = 0.1
            }
        }
        rule {
            element = 'CLASS'
            excludes = [
                    "com.hypto.iam.server.db.models.*",
                    "com.hypto.iam.server.models.*",
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
    }
}

detekt {
    baseline = file("detekt_baseline.xml")
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    implementation("io.ktor:ktor-server-netty:$ktor_version")
    implementation("io.ktor:ktor-metrics:$ktor_version")
    implementation("io.ktor:ktor-locations:$ktor_version")
    implementation("io.ktor:ktor-gson:$ktor_version")
    implementation("io.ktor:ktor-client-core:$ktor_version")
    implementation("io.ktor:ktor-client-apache:$ktor_version")
    implementation("io.ktor:ktor-auth:$ktor_version")
    implementation("io.ktor:ktor-auth-jwt:$ktor_version")
    implementation("ch.qos.logback:logback-classic:1.2.10")

    implementation("com.zaxxer:HikariCP:$hikari_cp_version") // DB connection pooling
    implementation("org.flywaydb:flyway-core:$flyway_version") // DB Migrations
    implementation("org.postgresql:postgresql:$postgres_jdbc_driver") // DB JDBC driver


    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
    testImplementation("com.h2database:h2:$h2Version")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")

    // JooQ ORM
    implementation("org.jooq:jooq:$jooq_version")
    implementation("org.jooq:jooq-codegen:$jooq_version")
    implementation("org.jooq:jooq-meta:$jooq_version")
    flywayMigration("org.postgresql:postgresql:$postgres_jdbc_driver")
    jooqGenerator("org.postgresql:postgresql:$postgres_jdbc_driver")

    implementation("org.casbin:jcasbin:$casbin_version") // Policy management
}

// configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds (and build caching)
    allInputsDeclared = true
}
