import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    ext.kotlin_version = '1.7.0'
    ext.ktor_version = '2.0.2'
    ext.koin_version = '3.2.0'
    ext.shadow_version = '5.2.0'
    ext.exposed_version = "0.37.3"
    ext.jooq_version = '3.16.6'
    ext.hikari_cp_version = "5.0.1"
    ext.junit_version = "5.8.2"
    ext.flyway_version = '8.5.12'
    ext.casbin_version = '1.24.0'
    ext.postgres_jdbc_driver = '42.3.6'

    repositories {
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
    }

    configurations['classpath'].resolutionStrategy.eachDependency {
        if (requested.group == 'org.jooq') {
            useVersion "$jooq_version"
        }
    }
}

plugins {
    id 'org.flywaydb.flyway' version "$flyway_version"
    id 'nu.studer.jooq' version '7.1'
    id "io.gitlab.arturbosch.detekt" version "1.20.0"
    id "org.jlleitschuh.gradle.ktlint" version "10.3.0"
    id "jacoco"
    id "org.openapi.generator" version "5.3.0"
    id "com.osacky.doctor" version "0.8.0"
}

group 'com.hypto'
version '1.0.0'

wrapper {
    gradleVersion = '7.4.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

mainClassName = "com.hypto.iam.server.ApplicationKt"
sourceCompatibility = 11

sourceSets {
    main.java.srcDirs += "$rootDir/main/kotlin"
    main.java.srcDirs += "$buildDir/generated-src/openapi"
    main.kotlin.srcDirs += "$rootDir/main/kotlin"
    main.kotlin.srcDirs += "$buildDir/generated-src/jooq"
    test.kotlin.srcDirs += "$rootDir/test/kotlin"
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams(true)
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        csv.enabled = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/hypto/iam/server/db/tables/*',
                    'com/hypto/iam/server/models',
                    'com/hypto/iam/server/db/*',
                    'com/hypto/iam/server/security/Audit*'
            ])
        }))
    }
}
jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("$buildDir/jacoco")
}

shadowJar {
    baseName = 'hypto-iam-server'
    version = '1.0.0'
}

repositories {
    mavenCentral()
    google()
    maven { url 'https://jitpack.io' }
}

configurations {
    flywayMigration
}

flyway {
    configurations = ['flywayMigration']
    user = System.getenv("database__username") ?: "root"
    password = System.getenv("database__password") ?: "password"
    url = "jdbc:postgresql://${System.getenv("database__host") ?: "localhost"}:${System.getenv("database__port") ?: "4921"}/iam"
}

jooq {
    version = "$jooq_version"
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
//                    name = 'org.jooq.codegen.KotlinGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        recordVersionFields = 'lock_version' // fields used for optimistic locking
                        recordTimestampFields = 'lock_timestamp' // fields used for optimistic locking
//                        forcedTypes {
//                            forcedType {
//                                name = 'varchar'
//                                includeExpression = '.*'
//                                includeTypes = 'JSONB?'
//                            }
//                            forcedType {
//                                name = 'varchar'
//                                includeExpression = '.*'
//                                includeTypes = 'INET'
//                            }
//                        }

                        // Flags to consider:
                        // - https://www.jooq.org/doc/3.16/manual-single-page/#codegen-generate-visibility-modifier
                        // - https://www.jooq.org/doc/3.16/manual-single-page/#codegen-generate-java-time-types
                    }

                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        pojosAsKotlinDataClasses = false
                        fluentSetters = true
                        relations = true
//                        embeddablePrimaryKeys = true // Available only in paid version :(
                        daos = false
                        routines = false
                        indexes = false
                    }
                    target {
                        packageName = 'com.hypto.iam.server.db'
                        directory = "$buildDir/generated-src/jooq".toString()
                    }
                }
            }
        }
    }
}

task copyGitHooks(type: Copy) {
    description "Copies the git hooks from ${rootDir}/.githooks to the .git folder"
    from "${rootDir}/.githooks/"
    into "${rootDir}/.git/hooks/"
}

task installGitHooks(type: Exec) {
    description "Installs the pre-commit git hooks from ${rootDir}/.githooks"
    group 'git hooks'
    workingDir rootDir
    commandLine 'chmod'
    args '-R', '+x', '.git/hooks/'
    dependsOn copyGitHooks
    doLast {
        println('Git hook installed successfully')
    }
}

task cleanAPIDocs(type: Delete) {
    delete "$rootDir/docs/api_reference"
}

task generateAPIDocs(dependsOn: [cleanAPIDocs], type: GenerateTask) {
    generatorName = "markdown"
    verbose = false
    inputSpec = "$rootDir/iam_openapi_spec.yml".toString()
    outputDir = "$rootDir/docs/api_reference".toString()
    generateModelTests = false
    generateModelDocumentation = true
    generateApiTests = false
    generateApiDocumentation = true

    finalizedBy(ktlintFormat)
}

task generateServer(dependsOn: [clean], type: GenerateTask, group: "openapi tools") {
    generatorName = "kotlin-server"
    inputSpec = "$rootDir/iam_openapi_spec.yml".toString()
    outputDir = "$buildDir/generated-src/openapi_server".toString()
    apiPackage = "com.hypto.iam"
    invokerPackage = "com.hypto.iam"
    modelPackage = "com.hypto.iam.server.models"
    configOptions = [
            serializableModel: "true"
//            enumPropertyNaming: "UPPERCASE"
    ]
}

task deleteServer(type: Delete, group: "openapi tools") {
    delete "$buildDir/generated-src/openapi_server"
}

task generateOpenAPIModels(dependsOn: [generateServer], type: Copy, group: "openapi tools") {
    from("$buildDir/generated-src/openapi_server/src/main/kotlin/com/hypto/iam/server/models") {
        include '**/*'
    }
    into "$buildDir/generated-src/openapi/com/hypto/iam/server/models"
    finalizedBy(deleteServer)
}

task generateOpenAPI {
    dependsOn generateOpenAPIModels, generateAPIDocs
}

task dockerDistJar {
    description "Quickly build application using Docker without running tests and other lint checks"
    dependsOn tasks.named('compileKotlin')
    dependsOn tasks.named('compileJava')
}

jacocoTestCoverageVerification {
    dependsOn test
    finalizedBy jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    "com.hypto.iam.server.db.*",
                    "com.hypto.iam.server.*",
            ]
            limit {
                counter = 'INSTRUCTION'
                value = 'MISSEDRATIO'
                maximum = 0.1
            }
        }
        rule {
            element = 'CLASS'
            excludes = [
                    "com.hypto.iam.server.db.*",
                    "com.hypto.iam.server.*",
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
    }
}

detekt {
    baseline = file("detekt_baseline.xml")

    // Define the detekt configuration(s) you want to use.
    // Defaults to the default detekt configuration.
    config = files("detekt_config.yml")

    // Applies the config files on top of detekt's default config file. `false` by default.
    buildUponDefaultConfig = true

    autoCorrect = true
}

// TODO: Make tests ready for parallel execution and uncomment this block
//tasks.test {
//    systemProperties["junit.jupiter.execution.parallel.enabled"] = true
//    systemProperties["junit.jupiter.execution.parallel.mode.default"] = "concurrent"
//    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
//}

ktlint {
    version = "0.45.2"
    debug = false
    verbose = false
    android = false
    outputToConsole = true
    outputColorName = "RED"
    ignoreFailures = false
    enableExperimentalRules = false
    additionalEditorconfigFile = file(".editorconfig")
    disabledRules = ["import-ordering"]
//    baseline = file("my-project-ktlint-baseline.xml")
//    reporters {
//        reporter "plain"
//        reporter "checkstyle"
//        reporter "sarif"
//    }
//    kotlinScriptAdditionalPaths {
//        include fileTree("scripts/")
//    }
    filter {
        exclude("**/generated/**")
        exclude("**/generated-src/**")
        include("**/kotlin/**")
    }
}

dependencies {
    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.20.0")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    implementation("io.ktor:ktor-server-cio:$ktor_version")
    implementation("io.ktor:ktor-server-metrics:$ktor_version")
    implementation("io.ktor:ktor-server-locations:$ktor_version")
//    implementation("io.ktor:ktor-gson:$ktor_version")
    implementation("io.ktor:ktor-client-core:$ktor_version")
    implementation("io.ktor:ktor-client-apache:$ktor_version")
    // Ktor features
    implementation("io.ktor:ktor-server-content-negotiation:$ktor_version")
    implementation("io.ktor:ktor-serialization-gson:$ktor_version")
    implementation("io.ktor:ktor-server-auto-head-response:$ktor_version")
    implementation("io.ktor:ktor-server-status-pages:$ktor_version")
    implementation("io.ktor:ktor-server-call-id:$ktor_version")
    implementation("io.ktor:ktor-server-auth:$ktor_version")
    implementation("io.ktor:ktor-server-auth-jwt:$ktor_version")
    implementation("io.ktor:ktor-server-default-headers:$ktor_version")
    implementation("io.ktor:ktor-server-compression:$ktor_version")
    implementation("io.ktor:ktor-server-caching-headers:$ktor_version")
    implementation("io.ktor:ktor-server-hsts:$ktor_version")
    implementation("io.ktor:ktor-server-call-logging:$ktor_version")
    implementation("io.ktor:ktor-server-metrics-micrometer:$ktor_version")
    implementation("io.ktor:ktor-server-double-receive:$ktor_version")

    implementation("io.ktor:ktor-server-auth:$ktor_version")


    implementation("ch.qos.logback:logback-classic:1.2.11")
    implementation("com.zaxxer:HikariCP:$hikari_cp_version") // DB connection pooling
    implementation("org.flywaydb:flyway-core:$flyway_version") // DB Migrations
    implementation("org.postgresql:postgresql:$postgres_jdbc_driver") // DB JDBC driver

    // JooQ ORM
    implementation("org.jooq:jooq:$jooq_version")
    implementation("org.jooq:jooq-codegen:$jooq_version")
    implementation("org.jooq:jooq-meta:$jooq_version")
    flywayMigration("org.postgresql:postgresql:$postgres_jdbc_driver")
    jooqGenerator("org.postgresql:postgresql:$postgres_jdbc_driver")

    // Casbin
    implementation("org.casbin:jcasbin:$casbin_version") // Policy management

    // Koin dependencies
    implementation "io.insert-koin:koin-ktor:$koin_version"
    implementation "io.insert-koin:koin-logger-slf4j:$koin_version"

    // Logging
    implementation 'io.github.microutils:kotlin-logging:2.1.23'
    implementation 'org.slf4j:slf4j-simple:1.7.36'

    // Metrics
    implementation "io.ktor:ktor-server-metrics-micrometer:$ktor_version"

    // APM
    implementation 'com.newrelic.telemetry:micrometer-registry-new-relic:0.9.0'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
    //    runtimeOnly 'org.bouncycastle:bcprov-jdk15on:1.60'
    runtimeOnly 'io.jsonwebtoken:jjwt-gson:0.11.5' // or 'io.jsonwebtoken:jjwt-jackson:0.11.2' for gson

    // Validation
    implementation('io.konform:konform:0.4.0')

    // AWS Lambda
    implementation("com.amazonaws:aws-lambda-java-core:1.2.1")
    implementation("com.amazonaws:aws-lambda-java-events:3.11.0")

    // Hoplite
    implementation('com.sksamuel.hoplite:hoplite-json:2.1.5')

    // Cohort
    implementation("com.sksamuel.cohort:cohort-core:1.4.1")
    implementation("com.sksamuel.cohort:cohort-ktor2:1.4.1")
    implementation("com.sksamuel.cohort:cohort-hikari:1.4.1")
    implementation("com.sksamuel.cohort:cohort-logback:1.4.1")

    // AWS
    implementation platform('software.amazon.awssdk:bom:2.17.143')
    implementation("software.amazon.awssdk:cognitoidentity")
    implementation("software.amazon.awssdk:cognitoidentityprovider")
    implementation("software.amazon.awssdk:ses")

    // TxMan
    implementation("com.github.hwslabs:txman:0.1.0")

    // Test dependencies
    testImplementation("io.ktor:ktor-server-test-host:$ktor_version")
    testImplementation("io.insert-koin:koin-test:$koin_version")
    testImplementation "io.insert-koin:koin-test-junit5:$koin_version"
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
    testImplementation('io.mockk:mockk:1.12.4')
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")

    testImplementation 'org.testcontainers:junit-jupiter:1.17.2'
    testImplementation 'org.testcontainers:testcontainers:1.17.2'
    testImplementation 'org.testcontainers:postgresql:1.17.2'
}

// configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds (and build caching)
    allInputsDeclared = true
}

compileKotlin.dependsOn clean, tasks.named("detekt"), ktlintFormat, generateJooq, generateOpenAPIModels

gradle.taskGraph.whenReady { graph ->
  def shadowJarEnabled = gradle.startParameter.taskRequests
    .find {it.args.find {it.contains("shadowJar")} != null  } != null
    println(gradle.startParameter.taskRequests)
    println(shadowJarEnabled)
  if (!shadowJarEnabled) {
    gradle.startParameter.excludedTaskNames += "shadowJar"
    shadowJar.enabled = false
    distZip.enabled = false
  }
}
